#pragma once

#include <fstream>
#include <memory>
#include <string>
#include <vector>

#include "winnt.h"

namespace PE_FILE_NS {

// Constants
const WORD MAGIC = 0x5A4D;    // MZ
const DWORD SIG = 0x00004550; // PE\0\0

class PEFile {
public:
  /*
  * Constructor.
  * fileName is a const string reference containing the file name/path.
  */
  PEFile(const std::string_view fileName);

  /*
  * Gets the section that contains a given virtual address.
  * virtualAddress is the virtual address.
  * Returns a shared pointer to the struct for the section that contains the virtual address.
  */
  std::shared_ptr<IMAGE_SECTION_HEADER> getSection(const DWORD virtualAddress);

  /*
  * Converts a virtual address to the physical address in file.
  * virtualAddress is the address to convert.
  * Returns the physical address in file.
  */
  DWORD getPhysicalAddress(const DWORD virtualAddress);

private:
/*
* Pointer to the file's DOS Header.
*/
  std::shared_ptr<IMAGE_DOS_HEADER> m_dosHeader;

/*
* Pointer to the file's NT Header.
*/
  std::shared_ptr<IMAGE_NT_HEADERS32> m_ntHeader;

  /*
* Pointer to the file's File Header.
*/
  std::shared_ptr<IMAGE_FILE_HEADER> m_fileHeader;

/*
* Pointer to the file's Optional Header.
*/
  std::shared_ptr<IMAGE_OPTIONAL_HEADER32> m_optionalHeader;

/*
* The file's Image Base.
*/
  DWORD m_imageBase;

/*
* Vector of pointers to each Section Header that the file contains.
*/
  std::vector<std::shared_ptr<IMAGE_SECTION_HEADER>> m_sectionHeaders;
};

} // namespace PE_FILE_NS
