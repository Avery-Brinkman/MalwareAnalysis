#include <iostream>
#include <fstream>
#include <memory>
#include <Windows.h>

/*
 *	GOAL: Read the first instruction that program will execute
 *	Optional Header -> AddressOfEntryPoint (Relative Virtual Address)
 *	RVA + ImageBase = Absolute Virtual Address
 *	AddressOfEntryPoint MUST exist in some section
 *
 *	Look at section headers
 *		Name
 *		VirtualAddress (RVA, where it's loaded at runtime relative to ImageBase)
 *		RawAddress (Physical Location in file)
 *
 *	_VirtualAddress = Start RVA + ImageBase
 *
 *	VirtualAddressOfEntryPoint = AddressOfEntryPoint + ImageBase
 *	Find out which section that's in (look at StartVA)
 *
 *
 *	THEN
 *
 *	Convert the address to an offset into the section
 *
 *	THEN
 *
 *	Add offset to start of the section on the disk
 */


int main(int argc, char** argv) {
	// Allocate space to store dosHeader and ntHeader
	auto dosHeader = std::make_unique<IMAGE_DOS_HEADER>();
	auto ntHeader = std::make_unique<IMAGE_NT_HEADERS32>();

	// Open file
	std::ifstream inputFile("C:/Users/avery/Documents/MalwareAnalysis/vapid/sample.exe", std::ios::in | std::ios::binary);
	// Read first 64 bytes of the file as the dosHeader
	inputFile.read((char*)dosHeader.get(), sizeof(IMAGE_DOS_HEADER));
	if (!inputFile || (dosHeader->e_magic != 0x5A4D)) return 1;

	// Use e_lfanew to get to the NT Header of the file
	inputFile.seekg(dosHeader->e_lfanew);

	// Starting at offset of e_lfanew, read the next 248 bytes as the ntHeader
	inputFile.read((char*)ntHeader.get(), sizeof(IMAGE_NT_HEADERS32));
	if (!inputFile || (ntHeader->Signature != 0x00004550)) return 1;

	// Get the file and optional header
	auto fileHeader = std::make_unique<IMAGE_FILE_HEADER>(ntHeader->FileHeader);
	auto optionalHeader = std::make_unique<IMAGE_OPTIONAL_HEADER32>(ntHeader->OptionalHeader);

	std::cout << "Should be 0x00075CA0" << std::endl;
	std::cout << std::hex << ntHeader->OptionalHeader.AddressOfEntryPoint << std::endl;

	//for (int i = 0; i < argc; i++) {
	//	std::cout << argv[i] << std::endl;
	//}
	return 0;
}
