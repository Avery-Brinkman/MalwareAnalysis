#include <filesystem>
#include <fstream>
#include <iostream>
#include <memory>

#include "PE_File.h"

int main(int argc, char** argv) {
  std::filesystem::path fileLocation =
      "C:/Users/avery/Documents/MalwareAnalysis/vapid/sample.exe"; // argv[1];
  if (!std::filesystem::exists(fileLocation)) {
    std::cout << "No file exists at " << fileLocation << std::endl;
    return 1;
  }

  std::string hexString = "0x4c5002"; // argv[2];
  unsigned long relativeVirtualAddress = strtoul(hexString.c_str(), NULL, 0);

  // Initialize variables
  auto file = std::shared_ptr<PE_FILE_NS::PEFile>();
  unsigned long physicalAddress;
  try {
    // Create file object
    file = std::make_shared<PE_FILE_NS::PEFile>(fileLocation.string());
    // Convert RVA to Physical Address
    physicalAddress = file->getPhysicalAddress(relativeVirtualAddress);
  } catch (const std::exception& e) {
    std::cout << e.what() << std::endl;
    std::cout << std::hex << "0x" << relativeVirtualAddress << " -> ??" << std::endl;
    return 1;
  }

  // Display results
  std::cout << std::hex << "0x" << relativeVirtualAddress << " -> 0x" << physicalAddress
            << std::endl;
  return 0;
}
