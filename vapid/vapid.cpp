#include <cctype>
#include <filesystem>
#include <iostream>
#include <memory>

#include "PE_File.h"

int main(int argc, char** argv) {
  // Make sure both arguments are present
  if (argc < 3) {
    std::cout << "Not enough arguments!" << std::endl;
    return 1;
  }

  // Get file
  std::filesystem::path fileLocation = argv[1];
  if (!std::filesystem::exists(fileLocation)) {
    std::cout << "No file exists at " << fileLocation << std::endl;
    return 1;
  }

  // Get target virtual address
  std::string hexString = argv[2];
  // Convert to hex or dec
  bool isHex = hexString.starts_with("0x");
  for (int i = isHex ? 2 : 0; i < hexString.size(); i++) {
    if (isHex ? !std::isxdigit(hexString[i]) : !std::isdigit(hexString[i])) {
      std::cout << hexString << " is neither a valid hex number nor decimal number. Bad character: "
                << hexString[i] << std::endl;
      return 1;
    }
  }
  DWORD targetVirtualAddress = strtoul(hexString.c_str(), NULL, 0);

  // Initialize variables
  auto file = std::shared_ptr<PE_FILE_NS::PEFile>();
  DWORD physicalAddress;
  try {
    // Create file object
    file = std::make_shared<PE_FILE_NS::PEFile>(fileLocation.string());
    // Convert RVA to Physical Address
    physicalAddress = file->getPhysicalAddress(targetVirtualAddress);
  }
  // Exception handling
  catch (const std::exception& e) {
    // std::cout << e.what() << std::endl;
    std::cout << std::hex << "0x" << targetVirtualAddress << " -> ??" << std::endl;
    return 1;
  }

  // Display results
  std::cout << std::hex << "0x" << targetVirtualAddress << " -> 0x" << physicalAddress << std::endl;
  return 0;
}
